# -*- coding: utf-8 -*-
"""Python_Flask_Proj02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bt5qKzdiqltkpTVKP56QIgPOc51G9OeL

# Python Flask
"""

!pip install -q -U google-generativeai

## Import the Python SDK
import google.generativeai as genai
from IPython.display import Markdown

# Used to securely store your API key
from google.colab import userdata

GOOGLE_API_KEY=userdata.get('API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

"""## Notebook Google Colab: Backend Flask para Análise de Sentimento com Gemini API
Ele usa a API Gemini para analisar o sentimento de textos enviados via requisições POST.

## IP Dinamico do Colab
"""

# Usando o serviço ifconfig.me
print("Endereço IP do Colab (via ifconfig.me):")
get_ipython().system('curl ifconfig.me')
print("\n---")

"""# Célula 1: Instalar Dependências"""

# Instala as bibliotecas necessárias para o Flask, CORS, Gemini API e ngrok.
!pip install Flask flask-cors google-generativeai python-dotenv pyngrok

print("Dependências instaladas com sucesso!")

"""## Célula 2: Configurar ngrok e Chave da API Gemini
Passos Importantes:

Obtenha seu Token ngrok: Vá para https://ngrok.com/, crie uma conta gratuita e copie seu token de autenticação no dashboard (se parece com 2j3l4k5j6...).

Nesta célula, você configurará seu token de autenticação do ngrok e sua chave da API Gemini.
"""

!choco install ngrok

!ngrok config add-authtoken 2xxtYmYG0UxMwCStIZ8VB9wK8l3_22dhR7RWGZxw6913mXqfz

# Célula 2: Configurar ngrok e Chave da API Gemini
# Passos Importantes:
#
# Obtenha seu Token ngrok: Vá para https://ngrok.com/, crie uma conta gratuita e copie seu token de autenticação no dashboard (se parece com 2j3l4k5j6...).
#
# Nesta célula, você configurará seu token de autenticação do ngrok e sua chave da API Gemini.

# Importa o módulo os para interagir com variáveis de ambiente
import os

# Remova ou comente a instalação do choco, pois choco é para Windows e Colab usa Linux.
# !choco install ngrok # Remova esta linha

# O comando ngrok auth token já foi executado em uma célula anterior.
# !ngrok config add-authtoken 2xxtYmYG0UxMwCStIZ8VB9wK8l3_22dhR7RWGZxw6913mXqfz

# Carrega a chave da API do Google Colab
GOOGLE_API_KEY=userdata.get('API_KEY')

# Configura a API Gemini (isso ainda é útil para testar diretamente no notebook, se necessário)
genai.configure(api_key=GOOGLE_API_KEY)

# *** ADICIONE ESTA LINHA ***
# Define a variável de ambiente GEMINI_API_KEY que o script app.py espera.
os.environ["GEMINI_API_KEY"] = GOOGLE_API_KEY

print("Chave da API Gemini configurada e definida como variável de ambiente.")
print("Token ngrok configurado (verifique célula anterior se necessário).")

# Commented out IPython magic to ensure Python compatibility.
# # Célula 3:  main.py = app.py
# # Esta célula cria o arquivo app.py que contém o código do seu backend Flask.
# 
# %%writefile app.py
# # app.py
# import os
# from flask import Flask, request, jsonify
# from flask_cors import CORS
# import google.generativeai as genai
# from dotenv import load_dotenv
# 
# # app.py
# # from flask import Flask, jsonify, request
# 
# app = Flask(__name__)
# 
# @app.route('/saudacao', methods=['GET'])
# def saudacao():
#     """
#     Endpoint que retorna uma saudação.
#     Aceita um parâmetro 'nome' na URL.
#     """
#     nome = request.args.get('nome', 'Visitante') # Pega o parâmetro 'nome' da URL, padrão é 'Visitante'
#     mensagem = f'Olá, {nome}! Bem-vindo ao meu servidor Flask.'
#     return jsonify({'mensagem': mensagem})
# 
# if __name__ == '__main__':
#     # Para rodar o servidor, execute este arquivo: python app.py
#     # Ele estará acessível em http://127.0.0.1:5000/
#     pass # app.run(debug=True) # Uncommented this line

# Célula 4: Rodar o Aplicativo Flask e Expor com ngrok
# Esta célula inicia o servidor Flask em uma thread separada e cria um túnel ngrok para expô-lo à internet.

# @title Executar Flask e ngrok (Execute esta célula)

import os
import threading
import time
from pyngrok import ngrok
from app import app # Importa a instância do app Flask do arquivo app.py

# Porta em que o Flask será executado dentro da VM do Colab.
FLASK_PORT = 5000

# Função para iniciar o servidor Flask.
# Rodamos em uma thread separada para não bloquear a execução do notebook.
def run_flask_app():
    # host='0.0.0.0' é crucial para que o Flask aceite conexões externas à VM do Colab.
    # debug=False e use_reloader=False são recomendados ao rodar em threads.
    app.run(host='0.0.0.0', port=FLASK_PORT, debug=False, use_reloader=False)

# Inicia a thread do Flask.
flask_thread = threading.Thread(target=run_flask_app)
flask_thread.daemon = True # Permite que a thread seja encerrada se o notebook parar.
flask_thread.start()

print(f"Servidor Flask iniciado na porta {FLASK_PORT}...")

# Espera um pouco para o Flask iniciar completamente.
time.sleep(3)

# Cria um túnel ngrok para a porta do Flask.
public_url = ngrok.connect(FLASK_PORT)
print(f"URL pública do ngrok: {public_url}")

print("\n--- INSTRUÇÕES ---")
print(f"1. Copie a URL acima: {public_url}")
print("2. No seu frontend do Firebase Studio, atualize a URL de requisição para esta URL do ngrok.")
print("   (Ex: 'https://seutunel.ngrok-free.app/analyze_sentiment')")
print("3. Mantenha esta célula do Colab executando para que o túnel ngrok permaneça ativo.")
print("   Para parar, clique no botão 'Parar execução' (quadrado) no canto superior esquerdo da célula.")

# Mantém a célula executando para manter o túnel ngrok ativo.
# Se a célula terminar a execução, o túnel será fechado.
try:
    while True:
        time.sleep(3600) # Dorme por 1 hora, mantendo o túnel ativo.
except KeyboardInterrupt:
    print("\nInterrupção detectada. Encerrando túnel ngrok...")
    ngrok.kill() # Encerra todos os túneis ngrok.
    print("Túnel ngrok encerrado.")





# https://dashboard.ngrok.com/get-started/setup/windows